import React, { useEffect, useRef, useState } from 'react'

interface IProps {
    uploadImg: (img: File) => void
}
const Upload = React.memo(({ uploadImg }: IProps) => {
    const [image, setImage] = useState<File>()
    const ref = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (image) {
            uploadImg(image)
        }
    }, [image])

    const handleClick = () => {
        ref?.current?.click();
    }

    return (
        <div className='w-[100%] sm:flex sm:gap-2 my-2'>
            <div className={'flex justify-center w-[100%]'}>
                <input
                    ref={ref}
                    className='appearance-none hidden'
                    type='file'
                    onChange={(e) => {
                        setImage(e?.target?.files?.[0]);
                    }
                    }
                    accept='image/*'
                />
                <div>
                    <div
                    onClick={handleClick}
                     className='w-full dashed-file mt-[4px] relative px-4 bg-[#F8F8FD] flex flex-col items-center rounded-[5px] outline-none cursor-pointer !gap-[7px] py-3'>
                        <svg
                            width='20'
                            height='20'
                            viewBox='0 0 20 20'
                            fill='none'
                            xmlns='http://www.w3.org/2000/svg'
                        >
                            <path
                                d='M1.99781 14.954C2.03132 14.9253 2.06722 14.8982 2.09834 14.8671C3.07729 13.8857 4.05625 12.9052 5.03361 11.9222C5.17084 11.7842 5.31924 11.6709 5.51072 11.6119C5.87694 11.4978 6.19687 11.5791 6.46335 11.84C6.96999 12.3363 7.46704 12.8429 7.96889 13.3448C8.16117 13.5371 8.35505 13.7277 8.54892 13.9184C8.68216 14.0493 8.69573 14.0501 8.83455 13.912C9.9268 12.8206 11.0191 11.7283 12.1113 10.6361C12.665 10.0824 13.2243 9.53426 13.7692 8.97258C14.145 8.58482 14.7921 8.58722 15.1758 8.97577C16.1907 10.005 17.2183 11.0222 18.2404 12.0443C18.8132 12.6163 19.3861 13.1884 19.9565 13.7628C20.4472 14.2567 20.3299 15.021 19.7172 15.3394C19.3797 15.5149 18.9042 15.4495 18.6257 15.1742C18.0688 14.6229 17.5191 14.0652 16.9654 13.5115C16.1636 12.7089 15.3609 11.9071 14.5575 11.1052C14.5352 11.0829 14.5048 11.0685 14.4618 11.0382C14.3501 11.1451 14.24 11.2472 14.1338 11.3534C13.0599 12.4281 11.9868 13.5043 10.9137 14.579C10.4542 15.0394 9.99382 15.499 9.53346 15.9577C9.46804 16.0231 9.40022 16.087 9.32922 16.1476C8.91274 16.5034 8.37739 16.4875 7.98724 16.0997C7.35136 15.4678 6.72026 14.8312 6.08677 14.1969C6.03012 14.1402 5.97587 14.082 5.91683 14.0285C5.80513 13.928 5.7804 13.9272 5.6687 14.0357C5.47323 14.2248 5.27935 14.4155 5.08707 14.6078C4.10173 15.5915 3.11958 16.5784 2.13105 17.559C2.00419 17.6851 1.94674 17.8143 1.94914 17.9954C1.95791 18.7326 1.96829 19.4706 1.94754 20.2071C1.93238 20.7655 2.42864 21.2107 2.95442 21.2091C6.76813 21.1964 10.5818 21.2036 14.3963 21.2012C14.6899 21.2012 14.9437 21.2825 15.1527 21.49C15.57 21.9057 15.5253 22.587 15.0554 22.9421C14.8711 23.0809 14.6628 23.1535 14.4283 23.1535C10.5747 23.1527 6.72106 23.1631 2.86666 23.1463C1.68585 23.1415 0.646255 22.4243 0.199462 21.2794C0.0646255 20.9323 0 20.5701 0 20.1943C0.00159569 14.4482 0 8.70131 0.00159569 2.95522C0.00159569 2.0002 0.382168 1.21672 1.12337 0.619926C1.4824 0.331106 1.89648 0.146804 2.35923 0.0606363C2.63768 0.00877631 2.91214 0 3.18979 0C8.86487 0 14.5392 0 20.2134 0.000797846C20.8485 0.000797846 21.4301 0.179515 21.9448 0.555301C22.3812 0.874439 22.729 1.27576 22.9261 1.78079C23.0625 2.13105 23.1599 2.49726 23.1599 2.88102C23.1591 6.72744 23.1591 10.5739 23.1599 14.4203C23.1599 14.9971 22.6852 15.5173 22.0397 15.4208C21.6894 15.3681 21.4333 15.1718 21.2881 14.8399C21.2203 14.6844 21.2068 14.5232 21.2068 14.3548C21.2083 10.5619 21.2068 6.76813 21.2107 2.97517C21.2107 2.70151 21.1437 2.46375 20.9602 2.26269C20.7879 2.0736 20.5733 1.9651 20.3148 1.95153C20.2685 1.94914 20.2214 1.95073 20.1751 1.95073C14.441 1.95073 8.7069 1.95153 2.97277 1.94834C2.66161 1.94834 2.39833 2.03451 2.19009 2.26828C2.0385 2.43822 1.95472 2.63529 1.95233 2.86507C1.95153 2.94485 1.95153 3.02463 1.95153 3.10442C1.95153 6.9644 1.95153 10.8236 1.95153 14.6836C1.95153 14.7689 1.95153 14.8543 1.95153 14.9397C1.96749 14.9445 1.98265 14.9492 1.99781 14.954Z'
                                fill='#768396'
                            />
                            <path
                                d='M23.1602 21.1902C23.2711 21.1958 23.3493 21.2021 23.4267 21.2029C24.2836 21.2037 25.1405 21.2157 25.9966 21.199C26.5223 21.1886 27.0992 21.6442 26.9867 22.3439C26.9268 22.7157 26.7019 22.967 26.3444 23.0811C26.1968 23.1282 26.0349 23.1505 25.8793 23.1513C25.0695 23.1577 24.2588 23.1545 23.4482 23.1545C23.1602 23.1545 23.1594 23.1545 23.1594 23.4521C23.1594 24.309 23.1698 25.1651 23.1554 26.0219C23.1459 26.6139 22.6281 27.1333 21.9244 26.9618C21.5167 26.8629 21.2103 26.4671 21.2095 26.0411C21.2063 25.1842 21.2087 24.3281 21.2087 23.4712C21.2087 23.4178 21.2055 23.3651 21.2087 23.3117C21.2151 23.2047 21.1736 23.1481 21.0603 23.1537C21.0076 23.1569 20.9542 23.1537 20.9007 23.1537C20.051 23.1537 19.2005 23.1569 18.3508 23.1521C17.995 23.1505 17.7021 22.9965 17.5115 22.6997C17.1724 22.1723 17.3918 21.542 17.9303 21.2971C18.0644 21.2365 18.2239 21.2077 18.3715 21.2069C19.2284 21.199 20.0853 21.2029 20.9414 21.2029C21.0196 21.2029 21.097 21.2029 21.1927 21.2029C21.1991 21.1 21.2079 21.0234 21.2079 20.946C21.2087 20.0828 21.2159 19.2195 21.2055 18.3562C21.1999 17.9166 21.5095 17.4196 22.072 17.3533C22.5116 17.3015 22.8985 17.5145 23.0772 17.9701C23.1339 18.1137 23.1546 18.2788 23.1562 18.4344C23.1634 19.2642 23.1594 20.0947 23.1594 20.9245C23.1602 21.0035 23.1602 21.0825 23.1602 21.1902Z'
                                fill='#768396'
                            />
                            <path
                                d='M8.67213 9.64935C7.10994 9.66451 5.78951 8.36881 5.78712 6.76275C5.78392 5.1511 7.09239 3.85061 8.70165 3.86337C10.3077 3.87534 11.5922 5.13833 11.5875 6.77232C11.5827 8.38317 10.2734 9.66691 8.67213 9.64935ZM7.73386 6.75796C7.73067 7.29651 8.15034 7.72176 8.69846 7.71218C9.2729 7.70181 9.63194 7.25901 9.64789 6.75557C9.66146 6.32792 9.26892 5.79735 8.69686 5.79815C8.16869 5.79815 7.72828 6.21144 7.73386 6.75796Z'
                                fill='#768396'
                            />
                        </svg>
                        <span className='text-[#515B6F] text-[14px]'>
                            <span className='text-black '>
                                {`Click to uplaod`}
                            </span>
                        </span>
                    </div>
                    <div className='mt-[11px] pb-[10px] font-poppins text-[#768396] text-xs '>
                        Supported document: jpeg, jpg, png
                    </div>
                </div>
            </div>
            {/* 
          {image?.name && (
            <div className='flex flex-col gap-1 '>
              <img
                src={URL.createObjectURL(image)}
                alt='checkedImg'
                className='h-[100px] w-[120px]'
              />
              <div className='text-[10px]'>{image.name}</div>
            </div>
          )} */}
        </div>
    )
})

export default Upload